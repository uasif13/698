#include <mpi.h>
#include <cmath>
#include <math.h>
#include <climits>
#include <vector>
#include <array>
#include <iostream>
#include <sys/time.h>

using namespace std;
using std::cout;
using std::cerr;
using std::endl;

#include <cuda_runtime.h>
#include <cuda_profiler_api.h>
#include <helper_functions.h>
#include <helper_cuda.h>

#define MASTER 0
#define ROOT 0

#define NO_OF_NODES 10
extern "C" {
  int bfs(int * pfrontier, int my_rank, CSR * csr, int no_of_nodes, int pf_count);
}
class CSR {
   public:
      int* srcPtrs;
      int srcPtrs_size;
      int* dst;
      int dst_size;
      CSR(int * graph, int no_of_nodes){
      	  vector<int> v_srcPtrs;
	  vector<int> v_dst;
	  v_srcPtrs.push_back(0);
	  for (int i = 0; i < no_of_nodes*no_of_nodes; i ++) {
//	      printf("index: %d graph: %d srcPtrs_size: %d dst_size %d\n", i, graph[i], v_srcPtrs.size(), v_dst.size());
      	      int row = i / no_of_nodes;
	      int col = i % no_of_nodes;
	      if (graph[i] != 0){
		 // new row
		 if (row == v_srcPtrs.size()) {
		    v_srcPtrs.push_back(v_dst.size());
		 }
		 v_dst.push_back(col);
	      }
	      if (col == no_of_nodes - 1 && row == v_srcPtrs.size())
	      	 v_srcPtrs.push_back(v_dst.size());
	  }
	  v_srcPtrs.push_back(v_dst.size());
	  srcPtrs_size = v_srcPtrs.size();
	  srcPtrs = new int[srcPtrs_size];
	  dst_size = v_dst.size();
	  dst = new int[dst_size];
	  for (int i = 0; i < srcPtrs_size; i++){
	      srcPtrs[i] = v_srcPtrs[i];
	  }
	  for (int i = 0; i < dst_size; i ++){
	      dst[i] = v_dst[i];
	  }
      }
      CSR (int* n_srcPtrs, int* n_dst){
      	  srcPtrs = n_srcPtrs;
	  dst = n_dst;
      }
};

__global__ bfs_cuda(int * pfrontier, int my_rank, int * srcPtrs, int * dstPtrs, int no_of_nodes, int pf_count, int * nfrontier) {
  int i = blockDim.x*blockIdx.x+threadIdx.x;
  if (i < no_of_nodes) {
    if (pfrontier[i] != 0) {
      int start = srcPtrs[i];
      int end = srcPtrs[i+1];
      for (int j = start;j < end;j++) {
	nfrontier[dstPtrs[j]] = 1;
      }
    }
  }
  
}

void bfs (int * pfrontier, int my_rank, CSR * csr, int no_of_nodes, int pf_count) {

  int grid = 1;
  int threads = no_of_nodes;
  int * srcPtrs = csr -> srcPtrs;
  int * dst = csr -> dst;
  int srcPtrs_size = csr -> srcPtrs_size;
  int dst_size = csr -> dst_size;

  int * d_srcPtrs;
  int * d_dst;
  int * d_pfrontier;
  int * d_nfrontier;

  cudaMalloc(&d_srcPtrs, srcPtrs_size*sizeof(int));
  cudaMalloc(&d_dst, dst_size*sizeof(int));
  cudaMalloc(&d_pfrontier, no_of_nodes*sizeof(int));
  cudaMalloc(&d_nfrontier, no_of_nodes*sizeof(int));

  cudaMemcpy(d_srcPtrs, srcPtrs, srcPtrs_size*sizeof(int), cudaMemcpyHostToDevice);
  cudaMemcpy(d_dst, dst, dst_size*sizeof(int), cudaMemcpyHostToDevice);
  cudaMemcpy(d_pfrontier, pfrontier, no_of_nodes*sizeof(int), cudaMemcpyHostToDevice);

  bfs_cuda<<<grid, threads>>>(d_pfrontier, my_rank,d_srcPtrs,d_dstPtrs,no_of_nodes, pf_count , d_nfrontier);

  cudaMemcpy(d_nfrontier, pfrontier, no_of_nodes*sizeof(int), cudaMemcpyDeviceToHost);
}
